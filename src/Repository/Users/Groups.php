<?php

namespace Dentaku\Redmine\Repository\Users;

use Dentaku\Redmine\Model\AbstractModel;
use Dentaku\Redmine\Model\User\Group;
use Dentaku\Redmine\Model\User\Membership;
use Dentaku\Redmine\Model\User\User;
use Dentaku\Redmine\Repository\AbstractRepository;
use Doctrine\Common\Collections\Collection;
use JsonException;

class Groups extends AbstractRepository
{

    public const API_ROOT = "groups";

    public const GROUP_RELATION_MEMBERSHIPS = "memberships";
    public const GROUP_RELATION_USERS = "users";

    protected static array $relation_class_map = [
        self::GROUP_RELATION_MEMBERSHIPS => Membership::class,
        self::GROUP_RELATION_USERS => User::class
    ];

    protected function getModelClass(): string
    {
        return Group::class;
    }

    public function get(mixed $id): ?AbstractModel
    {
        $group = parent::get($id); // TODO: Change the autogenerated stub
        if ($group) {
            if (in_array(self::GROUP_RELATION_USERS, $this->fetch_relations, true)) {
                $users = $this->getUsers($group);
                if ($users) {
                    $group->setUsers($users);
                }
            }

        }

        return $group;
    }

    public function update(AbstractModel $model): ?AbstractModel
    {
        foreach ($model->getUsers() as $user) {
            $this->addUserToGroup($user, $model);
        }

        return parent::update($model); // TODO: Change the autogenerated stub
    }

    /**
     * @throws JsonException
     */
    public function addUserToGroup(User $user, Group $group): Group
    {
        if (!$group->getUsers()->find($user)) {
            $endpoint = $this->getEndpoint() . "/" . $group->getId() . "/users" . "." . $this->client->getFormat();
            $response = $this->client->post($endpoint, json_encode(["user_id" => $user->getId()], JSON_THROW_ON_ERROR));
            if ($response->isSuccess()) {
                $group->addUser($user);
            }
        }

        return $group;

    }

    public function removeUserFromGroup(User $user, Group $group): Group
    {
        if ($group->getUsers()->find($user)) {
            $endpoint = $this->getEndpoint() . "/" . $group->getId() . "/users/" . $user->getId() . "." . $this->client->getFormat();
            $response = $this->client->delete($endpoint);
            if ($response->isSuccess()) {
                $group->removeUser($user);
            }
        }
        return $group;
    }

    public function getUsers(Group $group): Collection
    {
        return $this->client->getRepository(Users::API_ROOT)
                ->addFilter(Users::USER_FILTER_GROUP_ID, $group->getId())
                ->search();
    }
}