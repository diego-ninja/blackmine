<?php

namespace Dentaku\Redmine\Repository\Projects;

use Dentaku\Redmine\Client\Client;
use Dentaku\Redmine\Collection\IdentityCollection;
use Dentaku\Redmine\Model\AbstractModel;
use Dentaku\Redmine\Model\Project\IssueCategory;
use Dentaku\Redmine\Model\Project\Module;
use Dentaku\Redmine\Model\Project\Project;
use Dentaku\Redmine\Model\Project\TimeEntry;
use Dentaku\Redmine\Model\Project\Tracker;
use Dentaku\Redmine\Model\User\Membership;
use Dentaku\Redmine\Repository\AbstractRepository;
use Doctrine\Common\Collections\ArrayCollection;
use JsonException;

class Projects extends AbstractRepository
{
    public const API_ROOT = "projects";

    public const PROJECT_RELATION_TRACKERS = "trackers";
    public const PROJECT_RELATION_ISSUE_CATEGORIES = "issue_categories";
    public const PROJECT_RELATION_ENABLED_MODULES = "enabled_modules";
    public const PROJECT_RELATION_TIME_ENTRY_ACTIVITIES = "time_entry_activities";
    public const PROJECT_RELATION_MEMBERSHIPS = "memberships";

    protected static array $relation_class_map = [
        self::PROJECT_RELATION_TRACKERS => Tracker::class,
        self::PROJECT_RELATION_ISSUE_CATEGORIES => IssueCategory::class,
        self::PROJECT_RELATION_ENABLED_MODULES => Module::class,
        self::PROJECT_RELATION_TIME_ENTRY_ACTIVITIES => TimeEntry::class,
        self::PROJECT_RELATION_MEMBERSHIPS => Membership::class
    ];

    protected static array $allowed_filters = [];

    protected IssueCategories $issue_categories_repository;

    public function __construct(Client $client, array $options = [])
    {
        parent::__construct($client, $options);
        $this->issue_categories_repository = new IssueCategories($client, $options);
    }

    protected function getModelClass(): string
    {
        return Project::class;
    }

    public function get(mixed $id): ?AbstractModel
    {
        $project = parent::get($id); // TODO: Change the autogenerated stub
        if ($project) {
            if (in_array(self::PROJECT_RELATION_ISSUE_CATEGORIES, $this->fetch_relations, true)) {
                $issue_categories = $this->getIssueCategories($project);
                if ($issue_categories) {
                    $project->setIssueCategories($issue_categories);
                }
            }

            if (in_array(self::PROJECT_RELATION_MEMBERSHIPS, $this->fetch_relations, true)) {
                $memberships = $this->getMemberships($project);
                if ($memberships) {
                    $project->setMemberships($memberships);
                }
            }

        }

        return $project;
    }

    public function create(AbstractModel $model): ?AbstractModel
    {
        /** @var Project $project */
        $project = parent::create($model);
        if ($project) {
            foreach ($project->getMemberships() as $membership) {
                $this->addMembership($project, $membership);
            }

            foreach ($project->getIssueCategories() as $issue_category) {
                $this->addIssueCategory($project, $issue_category);
            }
        }

        return $project;
    }

    public function update(AbstractModel $model): ?AbstractModel
    {
        /** @var Project $model */
        foreach ($model->getMemberships() as $membership) {
            if (!$membership->isPersisted()) {
                $this->addMembership($model, $membership);
            }
        }

        foreach ($model->getIssueCategories() as $issue_category) {
            if (!$issue_category->isPersisted()) {
                $this->addIssueCategory($model, $issue_category);
            }
        }

        return parent::update($model); // TODO: Change the autogenerated stub
    }

    public function archive(Project $project): Project
    {
        $endpoint = $this->getEndpoint() . "/" . $project->getId() . "/archive" . "." . $this->client->getFormat();
        $data = $this->client->put($endpoint,'', ["Content-Length" => 0]);

        return $project;
    }

    public function unArchive(Project $project): Project
    {
        $endpoint = $this->getEndpoint() . "/" . $project->getId() . "/unarchive" . "." . $this->client->getFormat();
        $data = $this->client->put($endpoint,'', ["Content-Length" => 0]);

        return $project;
    }

    /**
     * @throws JsonException
     */
    public function addIssueCategory(Project $project, IssueCategory $issue_category): Project
    {
        $endpoint = $this->getEndpoint() . "/" . $project->getId() . "/issue_categories" . "." . $this->client->getFormat();
        $response = $this->client->post($endpoint, json_encode($issue_category->getPayload(), JSON_THROW_ON_ERROR));
        if ($response->isSuccess()) {
            $project->addIssueCategory($issue_category);
        }

        return $project;
    }

    public function getIssueCategories(Project $project): IdentityCollection
    {
        $ret = new IdentityCollection();

        $endpoint = $this->getEndpoint() . "/" . $project->getId() . "/issue_categories" . "." . $this->client->getFormat();
        $response = $this->client->get($endpoint);

        if ($response->isSuccess()) {
            foreach ($response->getData()["issue_categories"] as $issue_category_data) {
                $issue_category = (new IssueCategory())->fromArray($issue_category_data);
                $ret->add($issue_category);
            }
        }

        return $ret;
    }

    /**
     * @throws JsonException
     */
    public function addMembership(Project $project, Membership $membership): Project
    {
        $endpoint = $this->getEndpoint() . "/" . $project->getId() . "/memberships" . "." . $this->client->getFormat();
        $response = $this->client->post($endpoint, json_encode($membership->getPayload(), JSON_THROW_ON_ERROR));

        if ($response->isSuccess()) {
            $project->addMembership($membership);
        }
        return $project;

    }

    public function getMemberships(Project $project): ArrayCollection
    {
        $ret = new IdentityCollection();

        $endpoint = $this->getEndpoint() . "/" . $project->getId() . "/memberships" . "." . $this->client->getFormat();
        $response = $this->client->get($endpoint);

        if ($response->isSuccess()) {
            foreach ($response->getData()["memberships"] as $membership_data) {
                $membership = (new Membership())->fromArray($membership_data);
                $ret->add($membership);
            }
        }

        return $ret;

    }
}